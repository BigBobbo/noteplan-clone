@import "tailwindcss";
@import "./styles/wiki-links.css";
@import "./styles/tasks.css";

/* Theme System - Define CSS Variables */
@theme {
  /* Default light theme colors */
  --color-bg-primary: #ffffff;
  --color-bg-secondary: #f9fafb;
  --color-bg-tertiary: #f3f4f6;
  --color-text-primary: #111827;
  --color-text-secondary: #6b7280;
  --color-text-tertiary: #9ca3af;
  --color-border-primary: #e5e7eb;
  --color-border-secondary: #d1d5db;
  --color-accent: #f59e0b;
  --color-accent-hover: #d97706;
}

/* Theme-specific overrides */
@layer base {
  /* Dark Theme */
  [data-theme='dark'] {
    --color-bg-primary: #1f2937;
    --color-bg-secondary: #111827;
    --color-bg-tertiary: #0f172a;
    --color-text-primary: #f9fafb;
    --color-text-secondary: #d1d5db;
    --color-text-tertiary: #9ca3af;
    --color-border-primary: #374151;
    --color-border-secondary: #4b5563;
    --color-accent: #fbbf24;
    --color-accent-hover: #f59e0b;
  }

  /* Ocean Theme - Light blue background with green accents */
  [data-theme='ocean'] {
    --color-bg-primary: #dbeafe;      /* Light blue */
    --color-bg-secondary: #bfdbfe;    /* Medium blue */
    --color-bg-tertiary: #93c5fd;     /* Darker blue */
    --color-text-primary: #1e3a8a;    /* Deep blue */
    --color-text-secondary: #1e40af;  /* Blue */
    --color-text-tertiary: #3b82f6;   /* Medium blue */
    --color-border-primary: #93c5fd;  /* Blue border */
    --color-border-secondary: #60a5fa; /* Darker blue border */
    --color-accent: #10b981;          /* Green accent */
    --color-accent-hover: #059669;    /* Darker green */
  }

  /* Ocean Theme - Override backgrounds and colors */
  [data-theme='ocean'] {
    background-color: #dbeafe;
    color: #1e3a8a;
  }

  [data-theme='ocean'] body {
    background-color: #dbeafe;
    color: #1e3a8a;
  }

  /* Ocean theme component overrides */
  [data-theme='ocean'] header,
  [data-theme='ocean'] .bg-white {
    background-color: #bfdbfe !important;
  }

  [data-theme='ocean'] .bg-gray-50,
  [data-theme='ocean'] .bg-gray-100 {
    background-color: #93c5fd !important;
  }

  [data-theme='ocean'] .bg-gray-200 {
    background-color: #60a5fa !important;
  }

  [data-theme='ocean'] .bg-gray-800,
  [data-theme='ocean'] .bg-gray-900 {
    background-color: #3b82f6 !important;
  }

  [data-theme='ocean'] .text-gray-900,
  [data-theme='ocean'] .text-gray-800 {
    color: #1e3a8a !important;
  }

  [data-theme='ocean'] .text-gray-600,
  [data-theme='ocean'] .text-gray-700 {
    color: #1e40af !important;
  }

  [data-theme='ocean'] .text-gray-500 {
    color: #3b82f6 !important;
  }

  [data-theme='ocean'] .text-gray-400,
  [data-theme='ocean'] .text-gray-300 {
    color: #60a5fa !important;
  }

  [data-theme='ocean'] .border-gray-200,
  [data-theme='ocean'] .border-gray-300 {
    border-color: #93c5fd !important;
  }

  [data-theme='ocean'] .border-gray-700 {
    border-color: #3b82f6 !important;
  }

  /* Ocean theme hover states */
  [data-theme='ocean'] .hover\:bg-gray-100:hover {
    background-color: #93c5fd !important;
  }

  [data-theme='ocean'] .hover\:bg-gray-200:hover {
    background-color: #60a5fa !important;
  }

  /* Ocean theme accent colors (green) */
  [data-theme='ocean'] .bg-amber-500,
  [data-theme='ocean'] .bg-amber-600 {
    background-color: #10b981 !important;
  }

  [data-theme='ocean'] .text-amber-600 {
    color: #10b981 !important;
  }

  [data-theme='ocean'] .bg-amber-100 {
    background-color: #d1fae5 !important;
  }
}

/* Redefine dark variant to work with data-theme */
@custom-variant dark (&:where([data-theme="dark"], [data-theme="dark"] *));

/* Add ocean variant for ocean-specific styles */
@custom-variant ocean (&:where([data-theme="ocean"], [data-theme="ocean"] *));

body {
  margin: 0;
  font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Roboto', sans-serif;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
}

* {
  box-sizing: border-box;
}

.ProseMirror {
  outline: none;
  min-height: 200px;
  padding: 1rem;
}

.ProseMirror p {
  margin: 0.5rem 0;
}

.ProseMirror h1 {
  font-size: 2rem;
  font-weight: bold;
  margin: 1rem 0 0.5rem;
}

.ProseMirror h2 {
  font-size: 1.5rem;
  font-weight: bold;
  margin: 0.875rem 0 0.5rem;
}

.ProseMirror h3 {
  font-size: 1.25rem;
  font-weight: bold;
  margin: 0.75rem 0 0.5rem;
}

.ProseMirror ul[data-type="taskList"] {
  list-style: none;
  padding: 0;
}

.ProseMirror ul[data-type="taskList"] li {
  display: flex;
  align-items: flex-start;
}

.ProseMirror ul[data-type="taskList"] li input[type="checkbox"] {
  margin-right: 0.5rem;
  margin-top: 0.25rem;
}

.ProseMirror code {
  background-color: rgba(0, 0, 0, 0.05);
  padding: 0.125rem 0.25rem;
  border-radius: 0.25rem;
  font-family: 'Courier New', monospace;
}

[data-theme='dark'] .ProseMirror code {
  background-color: rgba(255, 255, 255, 0.1);
}

[data-theme='ocean'] .ProseMirror code {
  background-color: rgba(30, 58, 138, 0.1);
}

/* ========================================
   WHITESPACE & INDENTATION PRESERVATION
   ======================================== */

/* Preserve whitespace in editor content */
.ProseMirror {
  white-space: pre-wrap;  /* Preserve spaces, wrap lines */
  tab-size: 4;            /* Make tabs = 4 spaces */
  -moz-tab-size: 4;
}

/* Specifically for paragraphs within lists (task details) */
.ProseMirror li > p,
.ProseMirror li > div {
  white-space: pre-wrap;
  margin: 0.25rem 0;
}

/* Preserve indentation in code blocks */
.ProseMirror pre,
.ProseMirror code {
  white-space: pre-wrap;
  tab-size: 4;
  -moz-tab-size: 4;
}

/* Ensure nested lists show indentation visually */
.ProseMirror ul ul,
.ProseMirror ol ul,
.ProseMirror ul ol,
.ProseMirror ol ol {
  margin-left: 1.5em;
}

/* ========================================
   TASK vs BULLET DISTINCTION
   ======================================== */

/* Task items - ONLY items with [data-is-task] get checkboxes */
.ProseMirror ul:not([data-type="taskList"]) > li[data-is-task="true"] {
  position: relative;
  padding-left: 2em;
  list-style: none;
  margin: 0.5rem 0;
  min-height: 1.5em;
  transition: background-color 0.15s ease;
}

/* Checkbox icon ONLY for tasks */
.ProseMirror ul:not([data-type="taskList"]) > li[data-is-task="true"]::before {
  content: "☐";
  position: absolute;
  left: 0.25em;
  top: 0.1em;
  font-size: 1.2em;
  color: #f59e0b;  /* Amber - matches app accent */
  font-weight: bold;
  line-height: 1;
  transition: all 0.15s ease;
  user-select: none;
  cursor: pointer;  /* Show it's clickable */
}

/* Regular bullet items - NO checkbox, use standard bullets */
.ProseMirror ul:not([data-type="taskList"]) > li:not([data-is-task]) {
  position: relative;
  margin: 0.5rem 0;
  list-style: disc;  /* Standard bullet point */
  margin-left: 1.5em;
}

/* Hover effect ONLY on tasks */
.ProseMirror ul:not([data-type="taskList"]) > li[data-is-task="true"]:hover {
  background-color: rgba(249, 250, 251, 0.5);
  border-radius: 0.25rem;
  padding-right: 0.5rem;
}

[data-theme='dark'] .ProseMirror ul:not([data-type="taskList"]) > li[data-is-task="true"]:hover {
  background-color: rgba(55, 65, 81, 0.3);
}

.ProseMirror ul:not([data-type="taskList"]) > li[data-is-task="true"]:hover::before {
  color: #d97706;  /* Darker orange on hover */
  transform: scale(1.15);
}

/* Nested task/list indentation */
.ProseMirror ul:not([data-type="taskList"]) ul {
  margin-left: 2em;
  margin-top: 0.5rem;
  border-left: 2px solid rgba(249, 115, 22, 0.2);
  padding-left: 0.5rem;
}

[data-theme='dark'] .ProseMirror ul:not([data-type="taskList"]) ul {
  border-left-color: rgba(251, 146, 60, 0.3);
}

/* Task tags styling */
.ProseMirror ul:not([data-type="taskList"]) > li[data-is-task="true"] a[href^="#"] {
  background-color: rgba(245, 158, 11, 0.1);
  padding: 0.125rem 0.375rem;
  border-radius: 0.25rem;
  font-size: 0.875em;
  font-weight: 500;
  text-decoration: none;
}

[data-theme='dark'] .ProseMirror ul:not([data-type="taskList"]) > li[data-is-task="true"] a[href^="#"] {
  background-color: rgba(245, 158, 11, 0.15);
}

/* ========================================
   TASK STATE-SPECIFIC STYLING
   ======================================== */

/* Completed tasks - [x] or [X] */
.ProseMirror ul:not([data-type="taskList"]) > li[data-is-task="true"][data-task-state="completed"]::before {
  content: "☑";  /* Checked checkbox */
  color: #9ca3af;  /* Gray */
  opacity: 0.8;
}

.ProseMirror ul:not([data-type="taskList"]) > li[data-is-task="true"][data-task-state="completed"] {
  opacity: 0.5;
}

.ProseMirror ul:not([data-type="taskList"]) > li[data-is-task="true"][data-task-state="completed"] > * {
  text-decoration: line-through;
  color: #6b7280;
}

[data-theme='dark'] .ProseMirror ul:not([data-type="taskList"]) > li[data-is-task="true"][data-task-state="completed"] > * {
  color: #9ca3af;
}

/* Cancelled tasks - [-] */
.ProseMirror ul:not([data-type="taskList"]) > li[data-is-task="true"][data-task-state="cancelled"]::before {
  content: "☒";  /* X checkbox */
  color: #ef4444;  /* Red */
  opacity: 0.8;
}

.ProseMirror ul:not([data-type="taskList"]) > li[data-is-task="true"][data-task-state="cancelled"] {
  opacity: 0.6;
}

.ProseMirror ul:not([data-type="taskList"]) > li[data-is-task="true"][data-task-state="cancelled"] > * {
  text-decoration: line-through;
  color: #b91c1c;  /* Dark red */
}

[data-theme='dark'] .ProseMirror ul:not([data-type="taskList"]) > li[data-is-task="true"][data-task-state="cancelled"] > * {
  color: #f87171;  /* Light red for dark mode */
}

/* Scheduled/In-progress tasks - [>] */
.ProseMirror ul:not([data-type="taskList"]) > li[data-is-task="true"][data-task-state="scheduled"]::before {
  content: "◷";  /* Clock/timer symbol */
  color: #3b82f6;  /* Blue */
  font-size: 1.3em;
}

.ProseMirror ul:not([data-type="taskList"]) > li[data-is-task="true"][data-task-state="scheduled"] > * {
  color: #1e40af;  /* Dark blue */
  font-weight: 500;
}

[data-theme='dark'] .ProseMirror ul:not([data-type="taskList"]) > li[data-is-task="true"][data-task-state="scheduled"] > * {
  color: #93c5fd;  /* Light blue for dark mode */
}

.ProseMirror ul:not([data-type="taskList"]) > li[data-is-task="true"][data-task-state="scheduled"] {
  background-color: rgba(59, 130, 246, 0.05);
  border-radius: 0.25rem;
  padding-right: 0.5rem;
}

[data-theme='dark'] .ProseMirror ul:not([data-type="taskList"]) > li[data-is-task="true"][data-task-state="scheduled"] {
  background-color: rgba(59, 130, 246, 0.1);
}

/* Important tasks - [!] */
.ProseMirror ul:not([data-type="taskList"]) > li[data-is-task="true"][data-task-state="important"]::before {
  content: "☐";  /* Same checkbox but styled differently */
  color: #dc2626;  /* Bright red */
  font-weight: 900;
  font-size: 1.3em;
  text-shadow: 0 0 2px rgba(220, 38, 38, 0.5);
}

.ProseMirror ul:not([data-type="taskList"]) > li[data-is-task="true"][data-task-state="important"] > * {
  color: #991b1b;  /* Dark red */
  font-weight: 600;
}

[data-theme='dark'] .ProseMirror ul:not([data-type="taskList"]) > li[data-is-task="true"][data-task-state="important"] > * {
  color: #fca5a5;  /* Light red for dark mode */
}

.ProseMirror ul:not([data-type="taskList"]) > li[data-is-task="true"][data-task-state="important"] {
  background-color: rgba(220, 38, 38, 0.05);
  border-radius: 0.25rem;
  padding-right: 0.5rem;
  border-left: 3px solid #dc2626;
  padding-left: 1.8em;
}

[data-theme='dark'] .ProseMirror ul:not([data-type="taskList"]) > li[data-is-task="true"][data-task-state="important"] {
  background-color: rgba(220, 38, 38, 0.15);
}

/* Hover states for stateful tasks */
.ProseMirror ul:not([data-type="taskList"]) > li[data-is-task="true"][data-task-state="scheduled"]:hover::before,
.ProseMirror ul:not([data-type="taskList"]) > li[data-is-task="true"][data-task-state="important"]:hover::before {
  transform: scale(1.2);
}

/* Disable hover effects on completed/cancelled tasks */
.ProseMirror ul:not([data-type="taskList"]) > li[data-is-task="true"][data-task-state="completed"]:hover,
.ProseMirror ul:not([data-type="taskList"]) > li[data-is-task="true"][data-task-state="cancelled"]:hover {
  background-color: transparent;
}

.ProseMirror ul:not([data-type="taskList"]) > li[data-is-task="true"][data-task-state="completed"]:hover::before,
.ProseMirror ul:not([data-type="taskList"]) > li[data-is-task="true"][data-task-state="cancelled"]:hover::before {
  transform: none;
}
